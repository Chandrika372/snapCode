void dfs(vector<int> &a,int idx,int n,vector<int> curr,vector<vector<int>> &ans,int sum){
    
    if(sum==0){
        ans.push_back(curr);
        return ;
    }
    if(sum<0 or idx>=n) return ;
    
    for(int i=idx;i<n;i++){
        
        if(i>idx and a[i]==a[i-1]) continue;
        curr.push_back(a[i]);
        dfs(a,i,n,curr,ans,sum-a[i]);
        curr.pop_back();
    }
    
    
}
vector<vector<int> > Solution::combinationSum(vector<int> &a, int sum) {
    sort(a.begin(),a.end());
    
    vector<vector<int>> ans;
    dfs(a,0,a.size(),vector<int>(),ans,sum);
    return ans;
    
}