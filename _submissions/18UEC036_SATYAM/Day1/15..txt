int dx[]={-1,-1,0,1,1,1,0,-1};
int dy[]={0,1,1,1,0,-1,-1,-1};
bool isvalid(int x,int y,int n,int m)
{
    if(x<0||x>=n||y<0||y>=m) return false;
    return true;
}
bool inside(int x,int y,vector<int> &E, vector<int> &F,int r){
    
    for(int i=0;i<E.size();i++){
        
        if((E[i]-x)*(E[i]-x)+(F[i]-y)*(F[i]-y)<=r*r) return true;
    }
    return false;
}
void dfs(int x,int y,vector<vector<bool>> &visited,int n,int m,
         vector<int> &E, vector<int> &F,int r
){
    
    
    visited[x][y]=true;
    
    for(int i=0;i<8;i++){
        int nx=x+dx[i],ny=y+dy[i];
        if(isvalid(nx,ny,n,m)&&(!inside(nx,ny,E,F,r))&&(!visited[nx][ny])){
            dfs(nx,ny,visited,n,m,E,F,r);
        }
    }
}
string Solution::solve(int A, int B, int C, int D, vector<int> &E, vector<int> &F) {
    int r=D;
    int n=A+1,m=B+1;
    vector<vector<bool>> visited(n,vector<bool> (m,false));
    if(inside(0,0,E,F,r)) return "NO";
    dfs(0,0,visited,n,m,E,F,r);
    if(visited[A][B]) return "YES";
    return "NO";
    
}
