int memo[500][500];
int func(string a,string b,int n,int m){
    
    if(n==0) return m;
    if(m==0) return n;
    if(memo[n][m]!=-1) return memo[n][m];
    if(a[n-1]==b[m-1]) return memo[n][m]=func(a,b,n-1,m-1);
    else{
        
        return memo[n][m]=min(1+func(a,b,n,m-1),min(1+func(a,b,n-1,m),1+func(a,b,n-1,m-1)));
        
    }
    
    
}
int Solution::minDistance(string a, string b) {
    
    int n=a.size(),m=b.size();
    memset(memo,-1,sizeof memo);
    // return func(a,b,n,m);
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0) dp[i][j]=j;
            else if(j==0) dp[i][j]=i;
            else if(a[i-1]==b[j-1]) dp[i][j]=dp[i-1][j-1];
            else{
                dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]));
            }
        }
    }
    return dp[n][m];
}