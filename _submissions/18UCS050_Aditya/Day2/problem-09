int b;
void fun(vector<int> &A,vector<vector<int>> &ans,vector<int>v,int i,int s)
{
    if(s==b)
    {
        ans.push_back(v);
        return;
    }
    if(s>b || i==A.size())
        return;
    fun(A,ans,v,i+1,s);
    v.push_back(A[i]);
    fun(A,ans,v,i,s+A[i]);
}
vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    vector<int> u;
    unordered_map<int,int>m;
    for(int i=0;i<A.size();i++)
    {
        if(m[A[i]]==0)
        {
            u.push_back(A[i]);
            m[A[i]]++;
        }
    }
    vector<vector<int>> ans,res;
    vector<int>v;
    b=B;
    sort(u.begin(),u.end());
    fun(u,ans,v,0,0);
    sort(ans.begin(),ans.end());
    return ans;
}
