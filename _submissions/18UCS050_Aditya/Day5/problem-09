void fun(vector<int> &A,vector<vector<int>> &ans,vector<int>&v,int i)
{
    if(i==A.size())
    {
        ans.push_back(v);
        return;
    }
    ans.push_back(v);
    for(int j=i;j<A.size();j++)
    {
        v.push_back(A[j]);
        fun(A,ans,v,j+1);
        v.pop_back();
    }
}
vector<vector<int> > Solution::subsetsWithDup(vector<int> &A) {
    sort(A.begin(),A.end());
    vector<vector<int>> ans,res;
    vector<int> v;
    fun(A,ans,v,0);
    sort(ans.begin(),ans.end());
    for(int i=0;i<ans.size();i++)
    {
        if(i==0 || ans[i]!=ans[i-1])
            res.push_back(ans[i]);
    }
    return res;
}
