int mod=1000000007;
#define MAX 105
#define ll long long int
ll nc[MAX][MAX],ans[MAX];
long long int ncr(int n,int r)
{
    // long long int ans=1;
    // if(r>n-r)
    // r=n-r;
    // for(int i=0;i<r;i++)
    // {
    //     ans*=(long long int)(n-i);
    //     ans/=(long long int)(i+1);
    // }
    // return ans;
    if(r>n)
    return 0;
    if(r==0||r==n)
    return 1;
    if(nc[n][r]!=-1)
    return nc[n][r];
    nc[n][r]=(ncr(n-1,r)+ncr(n-1,r-1))%mod;
    return nc[n][r];
}
int getmaxheaps(int n)
{
     if(n<=1)
        return 1;
            
    if(ans[n]!=-1)
        return ans[n];
    int total=pow(2,int(log2(n))),L,R;
    int leaves=n-(total-1);
    if(leaves>=total/2)
    L=total-1;
    else
    L=total/2-1+leaves;
    R=n-1-L;
    long long int curr = (ncr(n-1,L)*getmaxheaps(L))%mod*(getmaxheaps(R));
    curr%=mod;
    ans[n] = curr;
    return curr;
}
int Solution::solve(int A) {
    // if(A<=1)
    // return 1;
    // int total=pow(2,int(log2(A))),L,R;
    // int leaves=A-(total-1);
    // if(leaves>=total/2)
    // L=total-1;
    // else
    // L=total/2-1+leaves;
    // R=A-1-L;
    // return ((ncr(A-1,L))*(((long long int)solve(L)*(long long int)solve(R))%mod))%mod;
    memset(nc,-1,sizeof(nc));
    memset(ans,-1,sizeof(ans));
    return getmaxheaps(A);
}
