int dp[500][500];
int count_min(string &A,string &B,int n,int m)
{
    if(dp[n][m]!=-1)
    return dp[n][m];
    if(A[n-1]==B[m-1])
    {
        dp[n][m]=count_min(A,B,n-1,m-1);
    }
    else
    {
        dp[n][m]=count_min(A,B,n,m-1)+1;
        dp[n][m]=min(dp[n][m],count_min(A,B,n-1,m)+1);
        dp[n][m]=min(dp[n][m],count_min(A,B,n-1,m-1)+1);
    }
    return dp[n][m];
}
int Solution::minDistance(string A, string B) {
    int n=A.size(),m=B.size();
    memset(dp,-1,sizeof(dp));
    for(int i=0;i<=n;i++)
    dp[i][0]=i;
    for(int j=0;j<=m;j++)
    dp[0][j]=j;
    return count_min(A,B,n,m);
}
